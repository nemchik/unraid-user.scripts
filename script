#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

SCRIPTPATH=/boot/config/plugins/user.scripts/scripts
SCRIPTNAME="$(basename "$(cd -- "$(dirname "$0")" > /dev/null 2>&1;pwd -P)")"
touch "${SCRIPTPATH}/${SCRIPTNAME}/preferences.env"
export "$(grep -v '^#' "${SCRIPTPATH}/${SCRIPTNAME}/preferences.env" | xargs -d '\n')"

# Cleanup Function
cleanup() {
    local -ri EXIT_CODE=$?

    if [[ ${EXIT_CODE} -ne 0 ]]; then
        echo "script did not finish running successfully."
    fi

    echo "Exiting."

    exit ${EXIT_CODE}
    trap - ERR EXIT SIGABRT SIGALRM SIGHUP SIGINT SIGQUIT SIGTERM
}
trap 'cleanup' ERR EXIT SIGABRT SIGALRM SIGHUP SIGINT SIGQUIT SIGTERM

# Log Functions
log() { echo -e "<span class=''>$(date +"%F %T") [LOG] $*</span>"; }
login() { echo -e "<span class='login'>$(date +"%F %T") [LOGIN] $*</span>"; }
array() { echo -e "<span class='array'>$(date +"%F %T") [ARRAY] $*</span>"; }
system() { echo -e "<span class='system'>$(date +"%F %T") [SYSTEM] $*</span>"; }
warn() { echo -e "<span class='warn'>$(date +"%F %T") [WARN] $*</span>"; }
error() { echo -e "<span class='error'>$(date +"%F %T") [ERROR] $*</span>"; }

update_check() {
    log "Checking for script updates."
    local REPO
    REPO="https://github.com/nemchik/unraid-user.scripts"
    local BRANCH
    BRANCH=$(git -C "${SCRIPTPATH}/${SCRIPTNAME}" branch --show-current)

    git -C "${SCRIPTPATH}/${SCRIPTNAME}" fetch origin "${BRANCH}" -q

    local LOCAL_COMMIT
    LOCAL_COMMIT=$(git -C "${SCRIPTPATH}/${SCRIPTNAME}" rev-parse @)
    local LOCAL_DIFF
    LOCAL_DIFF=$(git -C "${SCRIPTPATH}/${SCRIPTNAME}" diff)
    local REMOTE_BRANCH
    REMOTE_BRANCH=$(git -C "${SCRIPTPATH}/${SCRIPTNAME}" rev-parse --abbrev-ref --symbolic-full-name '@{u}')
    local REMOTE_DIFF
    REMOTE_DIFF=$(git -C "${SCRIPTPATH}/${SCRIPTNAME}" diff "${LOCAL_COMMIT}" "${REMOTE_BRANCH}")

    if [ "${LOCAL_DIFF}" != "" ]; then
        error "Your local files have changes that may conflict with performing an update. Please resolve this manually."
    elif [ "${REMOTE_DIFF}" != "" ]; then
        warn "New changes are available for ${BRANCH} script."
        warn "Review the changes: <a href='${REPO%/}/compare/${LOCAL_COMMIT}...${BRANCH}' target='_blank'>here</a>"
        warn "Update using:"
        warn "git -C ${SCRIPTPATH}/${SCRIPTNAME} pull"
    else
        system "${BRANCH} script is up to date."
    fi
}

rclone_mount() {
    local INSTANCE=${1:-}

    #Default arguments for rclone mount. Can be overridden in the environment file
    local RCLONE_CONFIG="/boot/config/plugins/rclone/.rclone.conf"
    local RCLONE_LOCAL_PATH="/mnt/main/mounts/remote/rclone.${INSTANCE}"
    local RCLONE_REMOTE_NAME="${INSTANCE}"
    local RCLONE_REMOTE_PATH="/"

    #Overwrite default environment settings with settings from the file if present
    export "$(grep -v '^#' "${INSTANCE_FOLDER%%/}/${INSTANCE}.env" | xargs -d '\n')"

    #Check that rclone is installed
    command -v rclone > /dev/null 2>&1

    #Check the mount directory
    test -d "${RCLONE_LOCAL_PATH%%/}"
    test -w "${RCLONE_LOCAL_PATH%%/}"
    test -z "$(ls -A "${RCLONE_LOCAL_PATH%%/}")"

    #Check the rclone configuration file
    test -f "${RCLONE_CONFIG}"
    test -r "${RCLONE_CONFIG}"

    #Mount rclone
    rclone mount \
        "${RCLONE_REMOTE_NAME}:${RCLONE_REMOTE_PATH}" \
        "${RCLONE_LOCAL_PATH%%/}" \
        &

    system "Successfully mounted ${RCLONE_LOCAL_PATH%%/}"
    echo
}

main() {
    update_check
    if ! command -v rclone > /dev/null 2>&1; then
        error "rclone is not installed."
        exit 1
    fi
    if [[ $(rclone listremotes | wc -l) -lt 1 ]]; then
        error "rclone is not configured."
        exit 1
    fi

    while IFS= read -r line; do
        local INSTANCE=${line%%:}

        if [[ ! -f "${INSTANCE_FOLDER%%/}/${INSTANCE}.env" ]]; then
            warn "RCLONE_LOCAL_PATH must be set in ${INSTANCE_FOLDER%%/}/${INSTANCE}.env"
            warn "RCLONE_RC_ADDR must be set in ${INSTANCE_FOLDER%%/}/${INSTANCE}.env"
            warn "Each remote requires a different path and port."
            warn "${line} will not be mounted."
            echo
            continue
        fi

        export "$(grep -v '^#' "${INSTANCE_FOLDER%%/}/${INSTANCE}.env" | xargs -d '\n')"

        if [[ ! "${RCLONE_LOCAL_PATH%%/}" =~ ^/.* ]]; then
            warn "RCLONE_LOCAL_PATH must be set in ${INSTANCE_FOLDER%%/}/${INSTANCE}.env"
            warn "Each remote requires a different path."
            warn "${line} will not be mounted."
            echo
            continue
        fi
        if [[ ! "${RCLONE_RC_ADDR}" =~ ^[a-zA-Z0-9_\.\-]+:[0-9]{1,5}$ ]]; then
            warn "RCLONE_RC_ADDR must be set in ${INSTANCE_FOLDER%%/}/${INSTANCE}.env"
            warn "Each remote requires a different port."
            warn "${line} will not be mounted."
            echo
            continue
        fi

        mkdir -p "${RCLONE_LOCAL_PATH%%/}"

        rclone_mount "${INSTANCE}"
    done < <(rclone listremotes)
}
main
