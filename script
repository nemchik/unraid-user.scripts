#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

SCRIPTPATH=/boot/config/plugins/user.scripts/scripts
SCRIPTNAME="$(basename "$(cd -- "$(dirname "$0")" > /dev/null 2>&1;pwd -P)")"
touch "${SCRIPTPATH}/${SCRIPTNAME}/preferences.env"
export "$(grep -v '^#' "${SCRIPTPATH}/${SCRIPTNAME}/preferences.env" | xargs -d '\n')"

# Cleanup Function
cleanup() {
    local -ri EXIT_CODE=$?

    if [[ ${EXIT_CODE} -ne 0 ]]; then
        echo "script did not finish running successfully."
    fi

    echo "Exiting."

    exit ${EXIT_CODE}
    trap - ERR EXIT SIGABRT SIGALRM SIGHUP SIGINT SIGQUIT SIGTERM
}
trap 'cleanup' ERR EXIT SIGABRT SIGALRM SIGHUP SIGINT SIGQUIT SIGTERM

# Log Functions
log() { echo -e "<span class=''>$(date +"%F %T") [LOG] $*</span>"; }
login() { echo -e "<span class='login'>$(date +"%F %T") [LOGIN] $*</span>"; }
array() { echo -e "<span class='array'>$(date +"%F %T") [ARRAY] $*</span>"; }
system() { echo -e "<span class='system'>$(date +"%F %T") [SYSTEM] $*</span>"; }
warn() { echo -e "<span class='warn'>$(date +"%F %T") [WARN] $*</span>"; }
error() { echo -e "<span class='error'>$(date +"%F %T") [ERROR] $*</span>"; }

update_check() {
    log "Checking for script updates."
    local REPO
    REPO="https://github.com/nemchik/unraid-user.scripts"
    local BRANCH
    BRANCH=$(git -C "${SCRIPTPATH}/${SCRIPTNAME}" branch --show-current)

    git -C "${SCRIPTPATH}/${SCRIPTNAME}" fetch origin "${BRANCH}" -q

    local LOCAL_COMMIT
    LOCAL_COMMIT=$(git -C "${SCRIPTPATH}/${SCRIPTNAME}" rev-parse @)
    local LOCAL_DIFF
    LOCAL_DIFF=$(git -C "${SCRIPTPATH}/${SCRIPTNAME}" diff)
    local REMOTE_BRANCH
    REMOTE_BRANCH=$(git -C "${SCRIPTPATH}/${SCRIPTNAME}" rev-parse --abbrev-ref --symbolic-full-name '@{u}')
    local REMOTE_DIFF
    REMOTE_DIFF=$(git -C "${SCRIPTPATH}/${SCRIPTNAME}" diff "${LOCAL_COMMIT}" "${REMOTE_BRANCH}")

    if [ "${LOCAL_DIFF}" != "" ]; then
        error "Your local files have changes that may conflict with performing an update. Please resolve this manually."
    elif [ "${REMOTE_DIFF}" != "" ]; then
        warn "New changes are available for ${BRANCH} script."
        warn "Review the changes: <a href='${REPO%/}/compare/${LOCAL_COMMIT}...${BRANCH}' target='_blank'>here</a>"
        warn "Update using:"
        warn "git -C ${SCRIPTPATH}/${SCRIPTNAME} pull"
    else
        system "${BRANCH} script is up to date."
    fi
}

mergerfs_mount() {
    local INSTANCE=${1:-}

    #Default arguments for mergerfs mount. Can be overridden in the environment file
    local What="/mnt/local/disk.*=RW:/mnt/network/share.*=RW:/mnt/remote/rclone.*=NC"
    local Where="/mnt/merged"
    local Options="category.create=mspmfs,minfreespace=0,allow_other,dropcacheonclose=true,security_capability=false,xattr=nosys,statfs_ignore=ro,use_ino,async_read=false,cache.files=auto-full"

    #Overwrite default environment settings with settings from the file if present
    export "$(grep -v '^#' "${INSTANCE_FOLDER%%/}/${INSTANCE}.env" | xargs -d '\n')"

    #Check that mergerfs is installed
    command -v mergerfs > /dev/null 2>&1

    #Check the mount directory
    test -d "${Where%%/}"
    test -w "${Where%%/}"
    test -z "$(ls -A "${Where%%/}")"

    #Mount mergerfs
    mergerfs \
        "${What}" \
        "${Where}" \
        -o "${Options}" \
        &

    system "Successfully mounted ${Where%%/}"
    echo
}

main() {
    update_check
    if ! command -v mergerfs > /dev/null 2>&1; then
        warn "mergerfs is not installed. Installing now."
        mkdir -p /tmp/mergerfs
        docker run -v /tmp/mergerfs:/build --rm trapexit/mergerfs-static-build
        mv /tmp/mergerfs/mergerfs /bin

        system "sleeping for 5 seconds."
        sleep 5

        if ! command -v mergerfs > /dev/null 2>&1; then
            error "mergerfs installation failed."
            exit 1
        fi
    fi

    while IFS= read -r line; do
        local INSTANCE=${line}

        if [[ ! -f "${INSTANCE_FOLDER%%/}/${INSTANCE}.env" ]]; then
            warn "'What' must be set in ${INSTANCE_FOLDER%%/}/${INSTANCE}.env"
            warn "'Where' must be set in ${INSTANCE_FOLDER%%/}/${INSTANCE}.env"
            warn "'Options' must be set in ${INSTANCE_FOLDER%%/}/${INSTANCE}.env"
            warn "${line} will not be mounted."
            echo
            continue
        fi

        export "$(grep -v '^#' "${INSTANCE_FOLDER%%/}/${INSTANCE}.env" | xargs -d '\n')"

        if [[ -z "${What}" ]]; then
            warn "'What' must be set in ${INSTANCE_FOLDER%%/}/${INSTANCE}.env"
            warn "${line} will not be mounted."
            echo
            continue
        fi
        if [[ ! "${Where%%/}" =~ ^/.* ]]; then
            warn "'Where' must be set in ${INSTANCE_FOLDER%%/}/${INSTANCE}.env"
            warn "${line} will not be mounted."
            echo
            continue
        fi
        if [[ -z "${Options}" ]]; then
            warn "'Options' must be set in ${INSTANCE_FOLDER%%/}/${INSTANCE}.env"
            warn "${Options} will not be mounted."
            echo
            continue
        fi

        mkdir -p "${Where%%/}"

        mmergerfs_mount "${INSTANCE}"
    done < <(ls ${INSTANCE_FOLDER%%/}/*.env)
    }
main
